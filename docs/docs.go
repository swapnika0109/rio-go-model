// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/google": {
            "post": {
                "description": "Accepts a Google access token, validates it, and returns a local JWT pair (access and refresh tokens). If the user doesn't exist, a new user profile is created.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Google Login",
                "parameters": [
                    {
                        "description": "Google Access Token",
                        "name": "google_login_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.GoogleLoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rio-go-model_internal_util.TokenPair"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or missing access_token",
                        "schema": {
                            "$ref": "#/definitions/rio-go-model_internal_util.HttpError"
                        }
                    },
                    "401": {
                        "description": "Invalid Google token",
                        "schema": {
                            "$ref": "#/definitions/rio-go-model_internal_util.HttpError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/rio-go-model_internal_util.HttpError"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "description": "Logs out a user by invalidating their refresh token. This is a client-side operation that clears tokens from storage.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User Logout",
                "parameters": [
                    {
                        "description": "Refresh Token to Invalidate",
                        "name": "logout_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.LogoutRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Logout successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body or missing refresh token",
                        "schema": {
                            "$ref": "#/definitions/rio-go-model_internal_util.HttpError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/rio-go-model_internal_util.HttpError"
                        }
                    }
                }
            }
        },
        "/auth/token/refresh": {
            "post": {
                "description": "Accepts a refresh token and returns a new, short-lived access token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Refresh Access Token",
                "parameters": [
                    {
                        "description": "Refresh Token",
                        "name": "refresh_token_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.RefreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\\\"access\\\":\\\"new_access_token\\\", \\\"refresh\\\":\\\"original_refresh_token\\\"}",
                        "schema": {
                            "$ref": "#/definitions/rio-go-model_internal_util.TokenPair"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or missing refresh token",
                        "schema": {
                            "$ref": "#/definitions/rio-go-model_internal_util.HttpError"
                        }
                    },
                    "401": {
                        "description": "Invalid refresh token",
                        "schema": {
                            "$ref": "#/definitions/rio-go-model_internal_util.HttpError"
                        }
                    },
                    "500": {
                        "description": "Failed to generate new access token",
                        "schema": {
                            "$ref": "#/definitions/rio-go-model_internal_util.HttpError"
                        }
                    }
                }
            }
        },
        "/auth/w/logout": {
            "post": {
                "description": "Logs out a user by invalidating their refresh token. This is a client-side operation that clears tokens from storage.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User Logout",
                "parameters": [
                    {
                        "description": "Refresh Token to Invalidate",
                        "name": "logout_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.LogoutRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Logout successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body or missing refresh token",
                        "schema": {
                            "$ref": "#/definitions/rio-go-model_internal_util.HttpError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/rio-go-model_internal_util.HttpError"
                        }
                    }
                }
            }
        },
        "/auth/w/token/refresh": {
            "post": {
                "description": "Accepts a refresh token and returns a new, short-lived access token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Refresh Access Token",
                "parameters": [
                    {
                        "description": "Refresh Token",
                        "name": "refresh_token_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.RefreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\\\"access\\\":\\\"new_access_token\\\", \\\"refresh\\\":\\\"original_refresh_token\\\"}",
                        "schema": {
                            "$ref": "#/definitions/rio-go-model_internal_util.TokenPair"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or missing refresh token",
                        "schema": {
                            "$ref": "#/definitions/rio-go-model_internal_util.HttpError"
                        }
                    },
                    "401": {
                        "description": "Invalid refresh token",
                        "schema": {
                            "$ref": "#/definitions/rio-go-model_internal_util.HttpError"
                        }
                    },
                    "500": {
                        "description": "Failed to generate new access token",
                        "schema": {
                            "$ref": "#/definitions/rio-go-model_internal_util.HttpError"
                        }
                    }
                }
            }
        },
        "/email": {
            "post": {
                "description": "Sends an email to the user",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Email"
                ],
                "summary": "Sends an email to the user",
                "parameters": [
                    {
                        "description": "Email request",
                        "name": "emailRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rio-go-model_internal_model.EmailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email sent successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to send email",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/stories": {
            "get": {
                "description": "Lists stories for a user based on their profile and theme preference. Returns stories with signed URLs for images and audio.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stories"
                ],
                "summary": "List Generated Stories",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Theme filter (1, 2, or 3)",
                        "name": "theme",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of stories to return (default: 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/internal_handlers.StoryData"
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid or missing authorization token",
                        "schema": {
                            "$ref": "#/definitions/rio-go-model_internal_util.HttpError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/rio-go-model_internal_util.HttpError"
                        }
                    }
                }
            }
        },
        "/story": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new story based on the user's profile and preferences.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Story"
                ],
                "summary": "Create a new story",
                "parameters": [
                    {
                        "description": "Story creation request",
                        "name": "story",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.CreateStoryRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Story created successfully",
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.StoryResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/rio-go-model_internal_util.HttpError"
                        }
                    },
                    "401": {
                        "description": "Invalid or missing authorization token",
                        "schema": {
                            "$ref": "#/definitions/rio-go-model_internal_util.HttpError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/rio-go-model_internal_util.HttpError"
                        }
                    }
                }
            }
        },
        "/story-feedback": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create story feedback",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "story-feedback"
                ],
                "summary": "Create story feedback",
                "parameters": [
                    {
                        "description": "StoryFeedback request",
                        "name": "storyFeedback",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rio-go-model_internal_model.StoryFeedback"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Story feedback created successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rio-go-model_internal_util.HttpError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rio-go-model_internal_util.HttpError"
                        }
                    }
                }
            }
        },
        "/tc": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create TC",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tc"
                ],
                "summary": "Create TC",
                "parameters": [
                    {
                        "description": "Tc request",
                        "name": "tc",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rio-go-model_internal_model.Tc"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "TC created successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rio-go-model_internal_util.HttpError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/rio-go-model_internal_util.HttpError"
                        }
                    }
                }
            }
        },
        "/triggers/pubsub": {
            "post": {
                "description": "Receives GCP Pub/Sub push messages and acknowledges with 200",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Triggers"
                ],
                "summary": "PubSub Push Handler",
                "parameters": [
                    {
                        "description": "PubSub Push Message",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.PubSubPushMessage"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user-profile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Gets the user profile information for the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get User Profile",
                "responses": {
                    "200": {
                        "description": "User profile retrieved successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "boolean"
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid or missing authorization token",
                        "schema": {
                            "$ref": "#/definitions/rio-go-model_internal_util.HttpError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/rio-go-model_internal_util.HttpError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the user profile for the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Update User Profile",
                "parameters": [
                    {
                        "description": "User profile request",
                        "name": "userProfile",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rio-go-model_internal_model.UserProfile"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User profile updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "boolean"
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid or missing authorization token",
                        "schema": {
                            "$ref": "#/definitions/rio-go-model_internal_util.HttpError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/rio-go-model_internal_util.HttpError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes the user profile for the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Delete User Profile",
                "responses": {
                    "200": {
                        "description": "User profile deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "boolean"
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid or missing authorization token",
                        "schema": {
                            "$ref": "#/definitions/rio-go-model_internal_util.HttpError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/rio-go-model_internal_util.HttpError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "internal_handlers.CreateStoryRequest": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "preferences": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "religions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "internal_handlers.GoogleLoginRequest": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                }
            }
        },
        "internal_handlers.LogoutRequest": {
            "type": "object",
            "properties": {
                "refresh": {
                    "type": "string"
                }
            }
        },
        "internal_handlers.PubSubMessage": {
            "type": "object",
            "properties": {
                "attributes": {
                    "description": "optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "data": {
                    "description": "base64-encoded",
                    "type": "string"
                },
                "messageId": {
                    "type": "string"
                },
                "publishTime": {
                    "type": "string"
                }
            }
        },
        "internal_handlers.PubSubPushMessage": {
            "type": "object",
            "properties": {
                "message": {
                    "$ref": "#/definitions/internal_handlers.PubSubMessage"
                },
                "subscription": {
                    "type": "string"
                }
            }
        },
        "internal_handlers.RefreshTokenRequest": {
            "type": "object",
            "properties": {
                "refresh": {
                    "type": "string"
                }
            }
        },
        "internal_handlers.StoryData": {
            "type": "object",
            "properties": {
                "audio": {
                    "type": "string"
                },
                "audio_type": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "story_id": {
                    "type": "string"
                },
                "story_text": {
                    "type": "string"
                },
                "theme": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "internal_handlers.StoryResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "rio-go-model_internal_model.EmailRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "rio-go-model_internal_model.StoryFeedback": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "like": {
                    "type": "boolean"
                },
                "storyId": {
                    "type": "string"
                }
            }
        },
        "rio-go-model_internal_model.Tc": {
            "type": "object",
            "properties": {
                "accepted": {
                    "type": "boolean"
                },
                "email": {
                    "type": "string"
                }
            }
        },
        "rio-go-model_internal_model.UserProfile": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "preferences": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "religions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "rio-go-model_internal_util.HttpError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "rio-go-model_internal_util.TokenPair": {
            "type": "object",
            "properties": {
                "access": {
                    "type": "string"
                },
                "refresh": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Story API",
	Description:      "A comprehensive API for generating and managing stories with AI",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
