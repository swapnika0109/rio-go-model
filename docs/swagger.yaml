basePath: /api/v1
definitions:
  handlers.CreateStoryRequest:
    properties:
      city:
        type: string
      country:
        type: string
      language:
        type: string
      preferences:
        items:
          type: string
        type: array
      religions:
        items:
          type: string
        type: array
    type: object
  handlers.GoogleLoginRequest:
    properties:
      access_token:
        type: string
    type: object
  handlers.LogoutRequest:
    properties:
      refresh:
        type: string
    type: object
  handlers.PubSubMessage:
    properties:
      attributes:
        additionalProperties:
          type: string
        description: optional
        type: object
      data:
        description: base64-encoded
        type: string
      messageId:
        type: string
      publishTime:
        type: string
    type: object
  handlers.PubSubPushMessage:
    properties:
      message:
        $ref: '#/definitions/handlers.PubSubMessage'
      subscription:
        type: string
    type: object
  handlers.RefreshTokenRequest:
    properties:
      refresh:
        type: string
    type: object
  handlers.StoryData:
    properties:
      audio:
        type: string
      audio_type:
        type: string
      image:
        type: string
      story_id:
        type: string
      story_text:
        type: string
      theme:
        type: string
      title:
        type: string
    type: object
  handlers.StoryResponse:
    properties:
      data: {}
      error:
        type: string
      message:
        type: string
    type: object
  model.EmailRequest:
    properties:
      email:
        type: string
      message:
        type: string
      name:
        type: string
    type: object
  model.StoryFeedback:
    properties:
      email:
        type: string
      like:
        type: boolean
      storyId:
        type: string
    type: object
  model.Tc:
    properties:
      accepted:
        type: boolean
      email:
        type: string
    type: object
  model.UserProfile:
    properties:
      city:
        type: string
      country:
        type: string
      email:
        type: string
      preferences:
        items:
          type: string
        type: array
      religions:
        items:
          type: string
        type: array
      username:
        type: string
    type: object
  util.HttpError:
    properties:
      message:
        type: string
      status:
        type: integer
    type: object
  util.TokenPair:
    properties:
      access:
        type: string
      refresh:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A comprehensive API for generating and managing stories with AI
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Story API
  version: "1.0"
paths:
  /auth/google:
    post:
      consumes:
      - application/json
      description: Accepts a Google access token, validates it, and returns a local
        JWT pair (access and refresh tokens). If the user doesn't exist, a new user
        profile is created.
      parameters:
      - description: Google Access Token
        in: body
        name: google_login_request
        required: true
        schema:
          $ref: '#/definitions/handlers.GoogleLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.TokenPair'
        "400":
          description: Invalid request body or missing access_token
          schema:
            $ref: '#/definitions/util.HttpError'
        "401":
          description: Invalid Google token
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Google Login
      tags:
      - Authentication
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logs out a user by invalidating their refresh token. This is a
        client-side operation that clears tokens from storage.
      parameters:
      - description: Refresh Token to Invalidate
        in: body
        name: logout_request
        required: true
        schema:
          $ref: '#/definitions/handlers.LogoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request body or missing refresh token
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: User Logout
      tags:
      - Authentication
  /auth/token/refresh:
    post:
      consumes:
      - application/json
      description: Accepts a refresh token and returns a new, short-lived access token.
      parameters:
      - description: Refresh Token
        in: body
        name: refresh_token_request
        required: true
        schema:
          $ref: '#/definitions/handlers.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{\"access\":\"new_access_token\", \"refresh\":\"original_refresh_token\"}'
          schema:
            $ref: '#/definitions/util.TokenPair'
        "400":
          description: Invalid request body or missing refresh token
          schema:
            $ref: '#/definitions/util.HttpError'
        "401":
          description: Invalid refresh token
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Failed to generate new access token
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Refresh Access Token
      tags:
      - Authentication
  /auth/w/logout:
    post:
      consumes:
      - application/json
      description: Logs out a user by invalidating their refresh token. This is a
        client-side operation that clears tokens from storage.
      parameters:
      - description: Refresh Token to Invalidate
        in: body
        name: logout_request
        required: true
        schema:
          $ref: '#/definitions/handlers.LogoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request body or missing refresh token
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: User Logout
      tags:
      - Authentication
  /auth/w/token/refresh:
    post:
      consumes:
      - application/json
      description: Accepts a refresh token and returns a new, short-lived access token.
      parameters:
      - description: Refresh Token
        in: body
        name: refresh_token_request
        required: true
        schema:
          $ref: '#/definitions/handlers.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{\"access\":\"new_access_token\", \"refresh\":\"original_refresh_token\"}'
          schema:
            $ref: '#/definitions/util.TokenPair'
        "400":
          description: Invalid request body or missing refresh token
          schema:
            $ref: '#/definitions/util.HttpError'
        "401":
          description: Invalid refresh token
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Failed to generate new access token
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: Refresh Access Token
      tags:
      - Authentication
  /email:
    post:
      consumes:
      - application/json
      description: Sends an email to the user
      parameters:
      - description: Email request
        in: body
        name: emailRequest
        required: true
        schema:
          $ref: '#/definitions/model.EmailRequest'
      responses:
        "200":
          description: Email sent successfully
          schema:
            type: string
        "400":
          description: Invalid JSON body
          schema:
            type: string
        "500":
          description: Failed to send email
          schema:
            type: string
      summary: Sends an email to the user
      tags:
      - Email
  /reset-audio-by-theme-id:
    get:
      consumes:
      - application/json
      description: Resets the audio by theme id
      parameters:
      - description: Theme ID
        in: query
        name: theme_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Audio reset successfully
          schema:
            additionalProperties:
              type: boolean
            type: object
        "401":
          description: Invalid or missing authorization token
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/util.HttpError'
      security:
      - BearerAuth: []
      summary: Reset Audio By Theme ID
      tags:
      - Audio
  /stories:
    get:
      consumes:
      - application/json
      description: Lists stories for a user based on their profile and theme preference.
        Returns stories with signed URLs for images and audio.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Theme filter (1, 2, or 3)
        in: query
        name: theme
        type: string
      - description: 'Number of stories to return (default: 10)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.StoryData'
            type: array
        "401":
          description: Invalid or missing authorization token
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/util.HttpError'
      summary: List Generated Stories
      tags:
      - Stories
  /story:
    post:
      consumes:
      - application/json
      description: Creates a new story based on the user's profile and preferences.
      parameters:
      - description: Story creation request
        in: body
        name: story
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateStoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Story created successfully
          schema:
            $ref: '#/definitions/handlers.StoryResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/util.HttpError'
        "401":
          description: Invalid or missing authorization token
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/util.HttpError'
      security:
      - BearerAuth: []
      summary: Create a new story
      tags:
      - Story
  /story-feedback:
    post:
      consumes:
      - application/json
      description: Create story feedback
      parameters:
      - description: StoryFeedback request
        in: body
        name: storyFeedback
        required: true
        schema:
          $ref: '#/definitions/model.StoryFeedback'
      produces:
      - application/json
      responses:
        "200":
          description: Story feedback created successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      security:
      - BearerAuth: []
      summary: Create story feedback
      tags:
      - story-feedback
  /tc:
    post:
      consumes:
      - application/json
      description: Create TC
      parameters:
      - description: Tc request
        in: body
        name: tc
        required: true
        schema:
          $ref: '#/definitions/model.Tc'
      produces:
      - application/json
      responses:
        "200":
          description: TC created successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HttpError'
      security:
      - BearerAuth: []
      summary: Create TC
      tags:
      - tc
  /triggers/audio/pubsub:
    post:
      consumes:
      - application/json
      description: Receives GCP Pub/Sub push messages and acknowledges with 200
      parameters:
      - description: PubSub Push Message
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.PubSubPushMessage'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: PubSub Push Handler
      tags:
      - Triggers
  /triggers/gemini/pubsub:
    post:
      consumes:
      - application/json
      description: Receives GCP Pub/Sub push messages and acknowledges with 200
      parameters:
      - description: PubSub Push Message
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.PubSubPushMessage'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: PubSub Push Handler
      tags:
      - Triggers
  /user-profile:
    delete:
      consumes:
      - application/json
      description: Deletes the user profile for the authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: User profile deleted successfully
          schema:
            additionalProperties:
              type: boolean
            type: object
        "401":
          description: Invalid or missing authorization token
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/util.HttpError'
      security:
      - BearerAuth: []
      summary: Delete User Profile
      tags:
      - User
    get:
      consumes:
      - application/json
      description: Gets the user profile information for the authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: User profile retrieved successfully
          schema:
            additionalProperties:
              type: boolean
            type: object
        "401":
          description: Invalid or missing authorization token
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/util.HttpError'
      security:
      - BearerAuth: []
      summary: Get User Profile
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Updates the user profile for the authenticated user.
      parameters:
      - description: User profile request
        in: body
        name: userProfile
        required: true
        schema:
          $ref: '#/definitions/model.UserProfile'
      produces:
      - application/json
      responses:
        "200":
          description: User profile updated successfully
          schema:
            additionalProperties:
              type: boolean
            type: object
        "401":
          description: Invalid or missing authorization token
          schema:
            $ref: '#/definitions/util.HttpError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/util.HttpError'
      security:
      - BearerAuth: []
      summary: Update User Profile
      tags:
      - User
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
